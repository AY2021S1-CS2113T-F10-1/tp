@startuml
'https://plantuml.com/sequence-diagram

[-> ":Parser": parse(fullCommand)
activate ":Parser"
    alt keyCommand = "exit"
        ":Parser" -> ":CloseCommand": <<create>>
        activate ":CloseCommand"
        ":CloseCommand" -> ":TextUi": showExit()
        activate ":TextUi"
        ":CloseCommand" <-- ":TextUi"
        deactivate ":TextUi"
        ":Parser" <-- ":CloseCommand"
        destroy ":CloseCommand"
    else keyCommand = "clear"
        ":Parser" -> ":ClearCommand": <<create>>
        activate ":ClearCommand"
        ":ClearCommand" -> ":UserInput": clear user inputs
        activate ":UserInput"
        ":ClearCommand" <-- ":UserInput"
        deactivate ":UserInput"
        ":ClearCommand" -> ":TextUi": showClearedFilterConditions()
        activate ":TextUi"
        ":ClearCommand" <-- ":TextUi"
        deactivate ":TextUi"
        ":Parser" <-- ":ClearCommand"
        destroy ":ClearCommand"
    else keyCommand = "filter"
        ":Parser" -> ":FilterCommand": <<create>>
        activate ":FilterCommand"
        alt criteria = "location"
            ":FilterCommand" -> ":UserInput": appends LOCATION query with value
            activate ":UserInput"
            ":FilterCommand" <-- ":UserInput"
            deactivate ":UserInput"
        else criteria = "type"
            ":FilterCommand" -> ":UserInput": appends TYPE query with value
            activate ":UserInput"
            ":FilterCommand" <-- ":UserInput"
            deactivate ":UserInput"
        else criteria = "lease_remaining"
            ":FilterCommand" -> ":UserInput": appends LEASE_REMAINING query with value
            activate ":UserInput"
            ":FilterCommand" <-- ":UserInput"
            deactivate ":UserInput"
        end
        ":FilterCommand" -> ":TextUi": showParameters(inputs)
        activate ":TextUi"
        ":FilterCommand" <-- ":TextUi"
        deactivate ":TextUi"
        ":Parser" <-- ":FilterCommand"
        destroy ":FilterCommand"
    else keyCommand = "help"
        ":Parser" -> ":HelpCommand": <<create>>
        activate ":HelpCommand"
        ":HelpCommand" -> ":TextUi": showHelp()
        activate ":TextUi"
        ":HelpCommand" <-- ":TextUi"
        deactivate ":TextUi"
        ":Parser" <-- ":HelpCommand"
        destroy ":HelpCommand"
    else keyCommand = "find"
        ":Parser" -> ":FindCommand": <<create>>
        activate ":FindCommand"
        opt user inputs not empty
            ":FindCommand" -> ":TextUi": showParameters(inputs)
            activate ":TextUi"
            ":FindCommand" <-- ":TextUi"
            deactivate ":TextUi"
            ":FindCommand" -> ":SearchedUnits": clear":SearchedUnits"()
            activate ":SearchedUnits"
            ":FindCommand" <-- ":SearchedUnits"
            deactivate ":SearchedUnits"
            ":FindCommand" -> ":ApiRepository": fetchedUnits(inputs)
            activate ":ApiRepository"
            ":FindCommand" <-- ":ApiRepository"
            deactivate ":ApiRepository"
            ":FindCommand" -> ":SearchedUnits": get":SearchedUnits"()
            activate ":SearchedUnits"
            ":FindCommand" <-- ":SearchedUnits": units
            deactivate ":SearchedUnits"
            ":FindCommand" -> ":TextUi": showUnits(units)
            activate ":TextUi"
            ":FindCommand" <-- ":TextUi"
            deactivate ":TextUi"
            ":FindCommand" -> ":UserInput": clear user inputs
            activate ":UserInput"
            ":FindCommand" <-- ":UserInput"
            deactivate ":UserInput"
        end
        ":Parser" <-- ":FindCommand"
        destroy ":FindCommand"
    else keyCommand = "list"
        ":Parser" -> ":ListCommand": <<create>>
        activate ":ListCommand"
        ":ListCommand" -> ":TextUi": showParameters(inputs)
        activate ":TextUi"
        ":ListCommand" <-- ":TextUi"
        deactivate ":TextUi"
        ":Parser" <-- ":ListCommand"
        destroy ":ListCommand"
    else keyCommand = "remove"
        ":Parser" -> ":RemoveCommand": <<create>>
        activate ":RemoveCommand"
        ":RemoveCommand" -> ":ShortList": removeFrom":ShortList"(index)
        activate ":ShortList"
        ":ShortList" --> ":RemoveCommand": removedUnit
        deactivate ":ShortList"
        alt removedUnit is not null
            ":RemoveCommand" -> ":TextUi": showRemoved":ShortList"Unit(removedUnit)
            activate ":TextUi"
            ":RemoveCommand" <-- ":TextUi"
            deactivate ":TextUi"
        else removedUnit is null
            ":RemoveCommand" -> ":TextUi": showInvalidIndex()
            activate ":TextUi"
            ":RemoveCommand" <-- ":TextUi"
            deactivate ":TextUi"
        end
        ":Parser" <-- ":RemoveCommand"
        destroy ":RemoveCommand"
    else keyCommand = "save":
        ":Parser" -> ":SaveCommand": <<create>>
        activate ":SaveCommand"
        ":SaveCommand" -> ":SearchedUnits": getUnit(index)
        activate ":SearchedUnits"
        ":SearchedUnits" --> ":SaveCommand": targetUnit
        deactivate ":SearchedUnits"
        opt targetUnit is not null
            ":SaveCommand" -> ":ShortList": addTo":ShortList"(targetUnit)
            activate ":ShortList"
            ":SaveCommand" <-- ":ShortList"
            deactivate ":ShortList"
            ":SaveCommand" -> ":TextUi": showSaved":ShortList"Unit(targetUnit)
            activate ":TextUi"
            ":SaveCommand" <-- ":TextUi"
            deactivate ":TextUi"
        end
        ":Parser" <-- ":SaveCommand"
        destroy ":SaveCommand"
    else keyCommand = "shortlist"
        ":Parser" -> ":ShortListCommand": <<create>>
        activate  ":ShortListCommand"
         ":ShortListCommand" -> ":ShortList": getShortListedUnits()
        activate ":ShortList"
        ":ShortList" -->  ":ShortListCommand": units
        deactivate ":ShortList"
        opt units is not empty
             ":ShortListCommand" -> ":TextUi": showShortListUnits(units)
            activate ":TextUi"
             ":ShortListCommand" <-- ":TextUi"
            deactivate ":TextUi"
        end
        ":Parser" <--  ":ShortListCommand"
        destroy  ":ShortListCommand"
    else keyCommand = "sort"
        ":Parser" -> ":SortCommand": <<create>>
        activate ":SortCommand"
        ref over ":SortCommand": execute SortCommand
        ":Parser" <-- ":SortCommand"
        destroy ":SortCommand"
    else
        ":Parser" -> ":TextUi": showInvalidInput(input)
        activate ":TextUi"
        ":Parser" <-- ":TextUi"
        deactivate ":TextUi"
    end
[<-- ":Parser": command
deactivate ":Parser"
@enduml